#include <stdio.h>
#include <math.h>

#define G 6.67e-11
#define R 6.4e6

typedef struct{
    float x;
    float y;
}vetor;

typedef struct {
    vetor velObj;
    vetor posObj;
}objeto;

typedef struct {
    char nome[80];
    float massa;
    objeto valor;
}nave;

typedef struct {
    objeto valor;
}projetil;

typedef struct {
    float massa;
    float raio;
    objeto valor;
}planeta;

void draw(objeto *objeto1, objeto objeto2, vetor aceleracao);
void addVetorAB(vetor *a, vetor b);
float normaVetor(vetor V);
void versorVetor(vetor *V, vetor A, vetor B);
void printVetor(vetor A);
void gravidade(nave nave1, planeta planeta1, vetor *aceleracao);
void distanciaAB(vetor *V, vetor A, vetor B);
float modulo(float x);

int main(){
    nave nave1;
    planeta planeta1;
    vetor aceleracaoAux;
    int i;
    i = 0;

    planeta1.valor.posObj.x = 0;
    planeta1.valor.posObj.y = 0;
    planeta1.massa = 6.02e24;

    nave1.valor.posObj.x = 6.4e6;
    nave1.valor.posObj.y = 6.4e6;
    nave1.massa = 2.79e9;

    nave1.valor.velObj.x = 0;
    nave1.valor.velObj.y = 0;

    for(i=0; i<10000; i++){
        gravidade(nave1, planeta1, &aceleracaoAux);
        draw(&nave1.valor, planeta1.valor, aceleracaoAux);
    }

    return 0;
}

void draw(objeto *objeto1, objeto objeto2, vetor aceleracao)
{
    addVetorAB(&(objeto1->velObj), aceleracao);
    addVetorAB(&(objeto1->posObj), objeto1->velObj);

    /*if ((objeto1->posObj.x > 200) || (objeto1->posObj.x < -200)) {   // O QUE VAI ACONTECER COM A NAVE QUANDO ELA CHEGAR NA FRONTEIRA
        objeto1->velObj.x = objeto1->velObj.x * -1000;                       //PODE SER INSERIDO NESSES BLOCOS
    }
    if ((objeto1->posObj.y> 200) || (objeto1->posObj.y < -200)) {
        objeto1->velObj.y = objeto1->velObj.y * -1000;
    }*/

    printVetor(objeto1->posObj);
    //printVetor(objeto1->velObj);
}

void addVetorAB(vetor *A, vetor B){
    A->x = A->x + B.x;
    A->y = A->y + B.y;
}

void distanciaAB(vetor *V, vetor A, vetor B){
    V->x = (A.x - B.x);
    V->y = (A.y - B.y);
}

float normaVetor(vetor V){
    return (sqrt(V.x * V.x + V.y * V.y));
}


void versorVetor(vetor *V, vetor A, vetor B){
    V->x = B.x - A.x;
    V->y = B.y - A.y;

    float norma = normaVetor((*V));

    V->x = (V->x)/norma;
    V->y = (V->y)/norma;
}

void printVetor(vetor A){
    printf("%lf %lf\n", A.x, A.y);
}

void gravidade(nave nave1, planeta planeta1, vetor *aceleracao){
    vetor r;
    vetor distancia;

    versorVetor(&r, nave1.valor.posObj, planeta1.valor.posObj);

    distanciaAB(&distancia, nave1.valor.posObj, planeta1.valor.posObj);

    if(0 <= distancia.x <10000 && 0 <= distancia.y <10000){

    }

    aceleracao->x = (r.x)*(G*(planeta1.massa))/(distancia.x * distancia.x);
    aceleracao->y = (r.y)*(G*(planeta1.massa))/(distancia.y * distancia.y);

    printVetor(*aceleracao);
}
